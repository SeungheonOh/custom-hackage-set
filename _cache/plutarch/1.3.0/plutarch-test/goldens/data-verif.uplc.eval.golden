erroneous.(String, Integer) /= (String, String) (program 1.0.0 error)
erroneous.[String] /= [Integer] (program 1.0.0 error)
erroneous.A { test := Integer, test2 := Integer } /= { test := String, test2 := Integer } (program 1.0.0 error)
erroneous.PDataSum constr 2 (program 1.0.0 error)
erroneous.PDataSum wrong record type (program 1.0.0 error)
erroneous.[ByteString] (with length == 2) /= PRational (program 1.0.0 error)
erroneous.[Integer] (with length == 0) /= PRational (program 1.0.0 error)
erroneous.[Integer] (with length == 3) /= PRational (program 1.0.0 error)
erroneous.[Integer] (with length == 2, with 0 denominator) /= PRational (program 1.0.0 error)
working.(String, String) == (String, String) (program 1.0.0 #d8799f43666f6f43626172ff)
working.[String] == [String] (program 1.0.0 #9f43666f6f43626172ff)
working.[Integer] (with length == 2) == PRational (program 1.0.0 ())
working.A { test := Integer, test2 := Integer } == { test := Integer, test2 := Integer } (program 1.0.0 #9f07182aff)
working.A { test := Integer, test2 := Integer } == [Integer] (program 1.0.0 #9f07182aff)
working.A { test := String, test2 := Integer } == { test := String, test2 := Integer } (program 1.0.0 #9f4362617a182aff)
working.PDataSum constr 0 (program 1.0.0 #d8799f0543666f6fff)
working.PDataSum constr 1 (program 1.0.0 #d87a9f0543666f6fff)
working.recover PWrapInt (program 1.0.0 True)
recovering a record partially vs completely.partially (program 1.0.0 #9f034362617aff)
recovering a record partially vs completely.completely (program 1.0.0 #9f034362617aff)
removing the data wrapper.erroneous.(String, Integer) /= (String, String) (program 1.0.0 error)
removing the data wrapper.erroneous.[String] /= [Integer] (program 1.0.0 error)
removing the data wrapper.working.(String, String) == (String, String) (program 1.0.0 #d8799f43666f6f43626172ff)
removing the data wrapper.working.[String] == [String] (program 1.0.0 #9f43666f6f43626172ff)
removing the data wrapper.partial checks.check whole structure (program 1.0.0 #9f9f9f0102030405060708090a0b0c0d0e0f101112131415161718181819181a181b181c181d181e181f1820182118221823182418251826182718281829182a182b182c182d182e182f1830183118321833183418351836183718381839183a183b183c183d183e183f1840184118421843184418451846184718481849184a184b184c184d184e184f1850185118521853185418551856185718581859185a185b185c185d185e185f18601861186218631864ffffff)
removing the data wrapper.partial checks.check structure partly (program 1.0.0 #9f9f9f0102030405060708090a0b0c0d0e0f101112131415161718181819181a181b181c181d181e181f1820182118221823182418251826182718281829182a182b182c182d182e182f1830183118321833183418351836183718381839183a183b183c183d183e183f1840184118421843184418451846184718481849184a184b184c184d184e184f1850185118521853185418551856185718581859185a185b185c185d185e185f18601861186218631864ffffff)
removing the data wrapper.recovering a nested record.succeeds (program 1.0.0 #9f9f182affff)
removing the data wrapper.recovering a nested record.fails (program 1.0.0 error)
removing the data wrapper.recovering a nested record.sample usage contains the right value (program 1.0.0 True)
example.concatenate two lists, legal (program 1.0.0 ())
example.concatenate two lists, illegal (list too short) (program 1.0.0 error)
example.concatenate two lists, illegal (wrong elements in list) (program 1.0.0 error)
example.concatenate two lists, illegal (more than one output) (program 1.0.0 error)
example2.recovering a record succeeds (program 1.0.0 #d8799f0443666f6fff)