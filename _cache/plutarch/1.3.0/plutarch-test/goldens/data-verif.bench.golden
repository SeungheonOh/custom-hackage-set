erroneous.(String, Integer) /= (String, String) {"exBudgetCPU":911716,"exBudgetMemory":612,"scriptSizeBytes":123}
erroneous.[String] /= [Integer] {"exBudgetCPU":467623,"exBudgetMemory":388,"scriptSizeBytes":101}
erroneous.A { test := Integer, test2 := Integer } /= { test := String, test2 := Integer } {"exBudgetCPU":304406,"exBudgetMemory":356,"scriptSizeBytes":153}
erroneous.PDataSum constr 2 {"exBudgetCPU":700994,"exBudgetMemory":230,"scriptSizeBytes":222}
erroneous.PDataSum wrong record type {"exBudgetCPU":990483,"exBudgetMemory":232,"scriptSizeBytes":282}
erroneous.[ByteString] (with length == 2) /= PRational {"exBudgetCPU":1682971,"exBudgetMemory":486,"scriptSizeBytes":510}
erroneous.[Integer] (with length == 0) /= PRational {"exBudgetCPU":125996,"exBudgetMemory":196,"scriptSizeBytes":472}
erroneous.[Integer] (with length == 3) /= PRational {"exBudgetCPU":1872200,"exBudgetMemory":422,"scriptSizeBytes":517}
erroneous.[Integer] (with length == 2, with 0 denominator) /= PRational {"exBudgetCPU":10192821,"exBudgetMemory":20520,"scriptSizeBytes":503}
working.(String, String) == (String, String) {"exBudgetCPU":4806613,"exBudgetMemory":14428,"scriptSizeBytes":123}
working.[String] == [String] {"exBudgetCPU":4994603,"exBudgetMemory":16904,"scriptSizeBytes":114}
working.[Integer] (with length == 2) == PRational {"exBudgetCPU":8446502,"exBudgetMemory":23384,"scriptSizeBytes":652}
working.A { test := Integer, test2 := Integer } == { test := Integer, test2 := Integer } {"exBudgetCPU":2950183,"exBudgetMemory":9876,"scriptSizeBytes":147}
working.A { test := Integer, test2 := Integer } == [Integer] {"exBudgetCPU":2950183,"exBudgetMemory":9876,"scriptSizeBytes":147}
working.A { test := String, test2 := Integer } == { test := String, test2 := Integer } {"exBudgetCPU":3007046,"exBudgetMemory":10176,"scriptSizeBytes":153}
working.PDataSum constr 0 {"exBudgetCPU":3276445,"exBudgetMemory":10722,"scriptSizeBytes":282}
working.PDataSum constr 1 {"exBudgetCPU":3841934,"exBudgetMemory":11924,"scriptSizeBytes":282}
working.recover PWrapInt {"exBudgetCPU":460390,"exBudgetMemory":1065,"scriptSizeBytes":15}
recovering a record partially vs completely.partially {"exBudgetCPU":2860826,"exBudgetMemory":9644,"scriptSizeBytes":149}
recovering a record partially vs completely.completely {"exBudgetCPU":3007046,"exBudgetMemory":10176,"scriptSizeBytes":153}
removing the data wrapper.erroneous.(String, Integer) /= (String, String) {"exBudgetCPU":899579,"exBudgetMemory":612,"scriptSizeBytes":117}
removing the data wrapper.erroneous.[String] /= [Integer] {"exBudgetCPU":479760,"exBudgetMemory":388,"scriptSizeBytes":114}
removing the data wrapper.working.(String, String) == (String, String) {"exBudgetCPU":4806613,"exBudgetMemory":14428,"scriptSizeBytes":123}
removing the data wrapper.working.[String] == [String] {"exBudgetCPU":4994603,"exBudgetMemory":16904,"scriptSizeBytes":114}
removing the data wrapper.partial checks.check whole structure {"exBudgetCPU":167380333,"exBudgetMemory":531268,"scriptSizeBytes":1524}
removing the data wrapper.partial checks.check structure partly {"exBudgetCPU":44823600,"exBudgetMemory":145544,"scriptSizeBytes":1494}
removing the data wrapper.recovering a nested record.succeeds {"exBudgetCPU":3700361,"exBudgetMemory":12008,"scriptSizeBytes":167}
removing the data wrapper.recovering a nested record.fails {"exBudgetCPU":419232,"exBudgetMemory":420,"scriptSizeBytes":167}
removing the data wrapper.recovering a nested record.sample usage contains the right value {"exBudgetCPU":3442374,"exBudgetMemory":10849,"scriptSizeBytes":157}
example.concatenate two lists, legal {"exBudgetCPU":40490231,"exBudgetMemory":108115,"scriptSizeBytes":893}
example.concatenate two lists, illegal (list too short) {"exBudgetCPU":34624552,"exBudgetMemory":84921,"scriptSizeBytes":886}
example.concatenate two lists, illegal (wrong elements in list) {"exBudgetCPU":40012573,"exBudgetMemory":105147,"scriptSizeBytes":893}
example.concatenate two lists, illegal (more than one output) {"exBudgetCPU":26315696,"exBudgetMemory":63576,"scriptSizeBytes":914}
example2.recovering a record succeeds {"exBudgetCPU":4617699,"exBudgetMemory":14942,"scriptSizeBytes":366}