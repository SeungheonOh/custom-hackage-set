id (program 1.0.0 (\i0 -> i1))
flip.const (program 1.0.0 (\i0 i0 -> i1))
plet (program 1.0.0 (\i0 i0 -> error))
primitives.bool.true (program 1.0.0 (\i0 -> True))
primitives.int.0 (program 1.0.0 (\i0 -> 0))
primitives.int.1 (program 1.0.0 (\i0 -> 1))
primitives.int.512 (program 1.0.0 (\i0 -> 512))
primitives.int.1048576 (program 1.0.0 (\i0 -> 1048576))
primitives.bytestring.1 (program 1.0.0 (\i0 -> #31))
primitives.bytestring.1111111 (program 1.0.0 (\i0 -> #31313131313131))
primitives.unit.list (program 1.0.0 (\i0 -> [()]))
primitives.unit.() (program 1.0.0 (\i0 -> ()))
primitives.id (program 1.0.0 (\i0 -> i1))
primitives.fun.lam+ (program 1.0.0 (\i0 -> addInteger))
primitives.fun.+ (program 1.0.0 addInteger)
η-reduction-optimisations.λx y. addInteger x y => addInteger (program 1.0.0 addInteger)
η-reduction-optimisations.λx y. hoist (force mkCons) x y => force mkCons (program 1.0.0 (force mkCons))
η-reduction-optimisations.λx y. hoist mkCons x y => mkCons x y (program 1.0.0 (\i0 i0 -> mkCons i2 i1))
η-reduction-optimisations.λx y. hoist (λx y. x + y - y - x) x y => λx y. x + y - y - x (program 1.0.0 (\i0
                 i0 ->
                  subtractInteger (subtractInteger (addInteger i2 i1) i1) i2))
η-reduction-optimisations.λx y. x + x (program 1.0.0 (\i0 i0 -> addInteger i2 i2))
η-reduction-optimisations.let x = addInteger in x 1 1 (program 1.0.0 (addInteger 1 1))
η-reduction-optimisations.let x = 0 in x => 0 (program 1.0.0 0)
η-reduction-optimisations.let x = hoist (λx. x + x) in 0 => 0 (program 1.0.0 0)
η-reduction-optimisations.let x = hoist (λx. x + x) in x (program 1.0.0 (\i0 -> addInteger i1 i1))
η-reduction-optimisations.λx y. sha2_256 x y =>! (program 1.0.0 (\i0 i0 -> sha2_256 i2 i1))
η-reduction-optimisations.let f = hoist (λx. x) in λx y. f x y => λx y. x y (program 1.0.0 (\i0 i0 -> i2 i1))
η-reduction-optimisations.let f = hoist (λx. x True) in λx y. f x y => λx y. (λz. z True) x y (program 1.0.0 (\i0 i0 -> i2 True i1))
η-reduction-optimisations.λy. (λx. x + x) y (program 1.0.0 (\i0 -> addInteger i1 i1))